// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	model_interfaces "match-system/interfaces/models"

	mock "github.com/stretchr/testify/mock"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// AddUserAndMatch provides a mock function with given fields: newuser
func (_m *UsersService) AddUserAndMatch(newuser model_interfaces.User) (model_interfaces.User, error) {
	ret := _m.Called(newuser)

	var r0 model_interfaces.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model_interfaces.User) (model_interfaces.User, error)); ok {
		return rf(newuser)
	}
	if rf, ok := ret.Get(0).(func(model_interfaces.User) model_interfaces.User); ok {
		r0 = rf(newuser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model_interfaces.User)
		}
	}

	if rf, ok := ret.Get(1).(func(model_interfaces.User) error); ok {
		r1 = rf(newuser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerySingleUsers provides a mock function with given fields: quertCount
func (_m *UsersService) QuerySingleUsers(quertCount int) ([]model_interfaces.User, error) {
	ret := _m.Called(quertCount)

	var r0 []model_interfaces.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]model_interfaces.User, error)); ok {
		return rf(quertCount)
	}
	if rf, ok := ret.Get(0).(func(int) []model_interfaces.User); ok {
		r0 = rf(quertCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model_interfaces.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(quertCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargetUser provides a mock function with given fields: userId
func (_m *UsersService) RemoveTargetUser(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
