// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	model_interfaces "match-system/interfaces/models"

	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// AddMatches provides a mock function with given fields: _a0
func (_m *User) AddMatches(_a0 model_interfaces.User) {
	_m.Called(_a0)
}

// DecreaseDateCount provides a mock function with given fields:
func (_m *User) DecreaseDateCount() {
	_m.Called()
}

// GenerateID provides a mock function with given fields:
func (_m *User) GenerateID() {
	_m.Called()
}

// GetGender provides a mock function with given fields:
func (_m *User) GetGender() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetHeight provides a mock function with given fields:
func (_m *User) GetHeight() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *User) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMatches provides a mock function with given fields:
func (_m *User) GetMatches() []model_interfaces.User {
	ret := _m.Called()

	var r0 []model_interfaces.User
	if rf, ok := ret.Get(0).(func() []model_interfaces.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model_interfaces.User)
		}
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *User) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetWantedDates provides a mock function with given fields:
func (_m *User) GetWantedDates() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsSameUser provides a mock function with given fields: _a0
func (_m *User) IsSameUser(_a0 model_interfaces.User) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model_interfaces.User) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveMatchUserRelationByID provides a mock function with given fields: _a0
func (_m *User) RemoveMatchUserRelationByID(_a0 string) {
	_m.Called(_a0)
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
